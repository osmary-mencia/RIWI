# diccionario vac√≠o llamado inventory. Este diccionario va a guardar la informaci√≥n de todos los productos.
# Clave: nombre del producto
# Valor: otro diccionario que contiene el precio y la cantidad del producto.
inventory = {}


#funci√≥n llamada menu, que ser√° el coraz√≥n del programa. Desde aqu√≠ se mostrar√° el men√∫ y 
# se llamar√°n las dem√°s funciones seg√∫n lo que el usuario elija.
def menu():
    
    #Mensaje decorativo para dar la bienvenida al usuario.
    print('\nüå∏  Ôº∑Ôº•Ôº¨Ôº£ÔºØÔº≠Ôº•   Ôº¥ÔºØ   ÔºØÔº≥Ôº≠Ôº°Ôº≤Ôºπ\'Ôº≥   Ôº≥Ôº®ÔºØÔº∞ üå∏')

    # Antes de mostrar el men√∫, se agregan obligatoriamente 5 productos iniciales
    five_initial_products()

    # Se inicia un bucle infinito (while True:) que servir√° para mostrar el men√∫ y ejecutar las acciones del programa
    # hasta que el usuario decida salir.
    while True:
        
        #Se muestra el men√∫ de opciones disponibles para el usuario.
        print('\n             ‚°∑‚†ÇInventory Manager‚†ê‚¢æ\n')
        print('(1) Add a product.')
        print('(2) Consult a product in inventory.')
        print('(3) Update the price of a product.')
        print('(4) Delete a product from inventory.')
        print('(5) Calculate total inventory value.')
        print('(0) Exit.')
        
        #Se solicita al usuario que elija una opci√≥n del men√∫.
        #.strip() elimina espacios innecesarios.
        opcion = input('\nChoose an available option from the menu: ').strip().lower()
        
        if opcion == '1':
            add_product()
        elif opcion == '2':
            consult_product()
        elif opcion == '3':
            update_price()
        elif opcion == '4':
            delete_product()
        elif opcion == '5':
            calculate_productos_inventory()
        elif opcion == '0':
            print('\nn„Éüüíñ See you later üíñ ÂΩ°')
            break
        else: 
            print('\n ‚ùå Invalid option. Choose a valid option from the menu.')
            
            
# Se define la funci√≥n five_initial_products, que se ejecuta antes del men√∫. 
# Su prop√≥sito es obligar al usuario a ingresar 5 productos v√°lidos al inventario antes de comenzar a trabajar con √©l.
def five_initial_products():
    
    #Muestra un mensaje indicando al usuario que debe ingresar 5 productos antes de continuar.
    print('\nBefore starting, enter 5 products into the inventory.')
    
    # Variable contador que lleva la cuenta de cu√°ntos productos v√°lidos se han ingresado.
    contador = 0
    
    #Bucle while que se repite hasta que el contador llegue a 5, es decir, hasta que se hayan agregado 5 productos exitosamente.
    while contador < 5:
        
        #Se pide el nombre del producto:
        # .strip() elimina espacios en blanco al inicio o final.
        # .upper() convierte el nombre a may√∫sculas para evitar duplicados con min√∫sculas (como "pan" y "PAN").
        name = input(f'\nEnter product number {contador+1}. \nProduct name: ').strip().upper()
        
        #Si el producto ya existe en el inventario, muestra un error y con continue vuelve a pedir el producto sin aumentar el contador.
        if name in inventory:
            print('\n‚ö†Ô∏è This product already exists.')
            continue
        
        # Verifica si el usuario no escribi√≥ nada
        # Si el campo est√° vac√≠o (el usuario solo presion√≥ Enter), lanza un error y pide el producto de nuevo.
        if not name:
            print('\n‚ö†Ô∏è The name product cannot be empty')
            continue
            
        try:
            price = float(input('Price: '))
            if price < 0:
                print('\n‚ö†Ô∏è The price cannot be negative.\n')
                continue
            
            amount = int(input('Amount: '))
            if amount < 0:
                print('\n‚ö†Ô∏è The amount cannot be negative.\n')
                continue
            
            # Si todo es v√°lido, se agrega el producto al diccionario global inventory, 
            # usando como clave el nombre y como valor otro diccionario con price y amount.
            inventory[name] = {'price': price, 'amount': amount}
            
            #Muestra mensaje de √©xito al agregar el producto correctamente.
            print('\n‚úÖ Products added successfully.\n')
            
            #Aumenta el contador porque se ingres√≥ un producto v√°lido.
            contador +=1
        
        # Si el usuario escribe letras o algo inv√°lido para el precio o cantidad, se atrapa el error y se muestra un mensaje claro.
        except ValueError:
            print('\n‚ö†Ô∏è Invalid entry. Enter numbers for price and amount.\n')
       
    
# Add a product to inventory
def add_product():
    # Se pide al usuario el nombre del producto.
    # .strip() elimina espacios en blanco al principio y al final.
    # .upper() convierte todo el texto a may√∫sculas, lo cual es √∫til para evitar duplicados escritos con min√∫sculas o con errores de formato.
    name = input('\nProduct name: ').strip().upper()
    
    # Verifica que el usuario s√≠ haya escrito algo.
    # Si deja el campo vac√≠o, el programa muestra un mensaje de advertencia y termina esta funci√≥n sin continuar (return).
    if not name:
        print('\n‚ö†Ô∏è The name product cannot be empty.')
        return
    
    # Revisa si ese nombre ya existe como clave en el diccionario inventory.
    # Si s√≠ existe, avisa al usuario y no guarda nada (para evitar duplicados).
    if name in inventory:
        print('\n‚ö†Ô∏è This product already exists.')
        return
    
    # Aqu√≠ usamos try porque si el usuario pone letras o s√≠mbolos no v√°lidos, eso causar√≠a un ValueError.
    try:
        price = float(input('Price: '))
        # Verifica que el precio no sea negativo, ya que eso no tendr√≠a sentido en un inventario.
        if price < 0:
            print('\n‚ö†Ô∏è The price cannot be negative.')
            return
        
        amount = int(input('Amount: '))
        if amount < 0:
            print('\n‚ö†Ô∏è The amount cannot be negative.')
            return
        
    # Si hubo alg√∫n error al convertir a float o int (por ejemplo, letras), el programa entra en este bloque y muestra un mensaje sin detenerse.
    except ValueError:
        print('\n‚ö†Ô∏è Invalid entry. Enter numbers for price and amount.')
        return
    
    # Si todo sali√≥ bien, se guarda el producto en el diccionario inventory usando:
    # El nombre como clave. 
    # Un diccionario interno como valor, que contiene el precio y la cantidad.
    inventory[name] = {'price': price, 'amount': amount}
    
    # Finalmente, confirma que el producto se agreg√≥ correctamente.
    print('‚úÖ Product added successfully.')
    
# Se define la funci√≥n consult_product, que ser√° llamada cuando el usuario quiera consultar informaci√≥n de un producto en el inventario.
def consult_product():
    
    #Aqu√≠ se le pide al usuario el nombre del producto que desea consultar.
    # .strip() elimina espacios en blanco al inicio y al final, para evitar errores si el usuario accidentalmente escribe " pan " en vez de "pan".
    # .upper() convierte todo a may√∫sculas. As√≠ se garantiza que los nombres se busquen de forma uniforme (por ejemplo, "Pan", "PAN", "pan" se tratar√°n igual).
    name = input('Product name to consult: ').strip().upper()
    
    # Se usa el m√©todo .get() del diccionario inventory para buscar el producto usando el nombre ingresado.
    # Si el producto existe, se guarda en la variable product. Si no existe, product ser√° None.
    product = inventory.get(name)
    
    # Si product tiene alg√∫n valor (es decir, s√≠ existe en el inventario), se muestra en pantalla: 
    # El nombre del producto, El precio, con 2 decimales (:.2f), La cantidad disponible
    if product:
        print(f"\n {name} -> Precio: ${product['price']:.2f}, Amount: {product['amount']}")
    else:
        # Si product es None, entonces el producto no se encontr√≥ en el inventario, y se muestra un mensaje claro al usuario.
        print('\n‚ùå The product doesn\'t exist in inventory')
        
# Define una funci√≥n llamada update_price que se encargar√° de actualizar el precio de un producto que ya est√° en el inventario.
def update_price():
    #  Se le pide al usuario el nombre del producto cuyo precio desea modificar.
    # .strip() elimina espacios en blanco innecesarios.
    # .upper() convierte el nombre a may√∫sculas para mantener el mismo formato en el inventario.
    name = input('\nProduct name you want to change the price of: ').strip().upper()

    # Se verifica si el producto existe en el inventario.
    # Si no existe, se muestra un mensaje de error y la funci√≥n termina con return.
    if name not in inventory:
        print('\n‚ùåThe product doesn\'t exist in inventory')
        return
    
    # Se intenta leer un nuevo precio ingresado por el usuario y convertirlo a tipo float (n√∫mero decimal).
    # Aqu√≠ usamos try porque si el usuario escribe letras o s√≠mbolos inv√°lidos, Python lanzar√≠a un error.
    try:
        
        new_price = float(input('New price: '))
        #Si el nuevo precio es menor que cero, se muestra un mensaje de advertencia y la funci√≥n termina.
        if new_price < 0:
            print('\n‚ö†Ô∏è The price cannot be negative.')
            return
        
    #  Si hubo un error al convertir el valor (por ejemplo, el usuario escribi√≥ "cinco" en vez de "5"), 
    # este bloque evita que el programa se caiga y muestra un mensaje de error.
    except ValueError:
        print('‚ö†Ô∏è Invalid entry. Enter numbers for price.')
        return
    
    # Si todo es correcto, se actualiza el precio del producto en el diccionario.
    # inventory[name] accede al producto, y 'price' es la clave dentro del diccionario anidado.
    inventory[name]['price'] = new_price
    # Muestra un mensaje confirmando que el precio fue actualizado correctamente.
    print('\n‚úÖ Updated price.')

# Define la funci√≥n delete_product, que no recibe par√°metros y se encargar√° de eliminar un producto del inventario.  
def delete_product():
    # Solicita al usuario el nombre del producto que desea eliminar.
    # strip() elimina los espacios en blanco al principio y al final del texto (√∫til si el usuario deja un espacio por error).
    # .upper() convierte todo el texto a may√∫sculas, para evitar errores de b√∫squeda por diferencias de may√∫sculas y min√∫sculas.
    name = input('\nProduct name to delete: ').strip().upper()
    
    # Verifica si el nombre ingresado existe como clave en el diccionario inventory.
    # Si existe, quiere decir que el producto est√° en el inventario.
    if name in inventory:
        # Elimina la clave name del diccionario inventory, es decir, borra el producto del inventario.
        del inventory[name]
        # Mensaje de confirmaci√≥n para que el usuario sepa que el producto fue eliminado con √©xito.
        print('\n‚úÖ Product deleted from inventory.')
    else:
        #  Si el producto no existe, se muestra un mensaje claro informando al usuario que ese producto no est√° en el inventario.
        print('\n‚ùå The product doesn\'t exist in inventory')
        
# Define la funci√≥n delete_product, que no recibe par√°metros y se encargar√° de eliminar un producto del inventario.
calculate_total_values = lambda inv: sum(info['price'] * info['amount'] for info in inv.values())

def calculate_productos_inventory():
    if not inventory:
       print('\nThe inventory is empty')
       return
    else:
        # Muestra encabezados en tabla:
        # Usa formateo para alinear texto como si fuera una tabla.
        print(f"\n{'Product':<20}{'Price ($)':<12}{'Amount':<10}")
        print('-' * 45)
        # Muestra cada producto:
        # Recorre el inventario con .items() y separa name y datas.
        # Muestra nombre, precio (con 2 decimales), y cantidad.
        for name, datas in inventory.items():
            print(f"{name:<20}${datas['price']:<12.2f}{datas['amount']:<10}")
        
        # Calcula y muestra el valor total:
        # Llama a la funci√≥n lambda para obtener el total del inventario.
        # Lo muestra con 2 decimales.
        total = calculate_total_values(inventory)
        print(f'\nüí≤Total inventory value: ${total:.2f}')
          
# Esto ejecuta el programa completo mostrando primero el mensaje de bienvenida, 
# solicitando los 5 productos iniciales, y luego abriendo el men√∫ principal.
menu()